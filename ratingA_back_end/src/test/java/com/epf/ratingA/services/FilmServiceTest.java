package com.epf.ratingA.services;
import com.epf.ratingA.config.TestConfig;
import com.epf.ratingA.dao.FilmDao;
import com.epf.ratingA.dto.FilmDto;
import com.epf.ratingA.enumer.Category;
import com.epf.ratingA.exceptions.FilmException;
import com.epf.ratingA.mappers.FilmMapper;
import com.epf.ratingA.models.Film;
import com.epf.ratingA.models.Rate;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

@SpringBootTest
@ContextConfiguration(classes = TestConfig.class)
public class FilmServiceTest {

    @Mock
    private FilmDao filmDao;

    @Mock
    private FilmMapper filmMapper;
    @InjectMocks
    private FilmService filmService;

    @Test
    public void testFindAll() {
        // Configuration du comportement simulé du dao
        when(filmDao.findAll()).thenReturn(Collections.singletonList(new Film()));

        // Exécution de la méthode à tester
        List<Film> films = filmService.findAll();

        // Assertions
        assertNotNull(films);
        assertFalse(films.isEmpty());
    }

    @Test
    public void testFindAllBestFilmByRates() {
        // Configuration du comportement simulé du dao
        when(filmDao.getBestFilmByRates()).thenReturn(Collections.singletonList(new Film()));

        // Exécution de la méthode à tester
        List<Film> bestFilms = filmService.findAllBestFilmByRates();

        // Assertions
        assertNotNull(bestFilms);
        assertFalse(bestFilms.isEmpty());
    }

    @Test
    public void testFindRatesByFilmId() {
        // Configuration du comportement simulé du dao
        when(filmDao.getAllRatesFromFilm(anyLong())).thenReturn(Collections.singletonList(new Rate()));

        // Exécution de la méthode à tester
        List<Rate> rates = filmService.findRatesByFilmId(1L);

        // Assertions
        assertNotNull(rates);
        assertFalse(rates.isEmpty());
    }

    @Test
    public void testFindFilmByTitle() {
        // Configuration du comportement simulé du dao
        when(filmDao.findFilmByTitle(anyString())).thenReturn(new Film());

        // Exécution de la méthode à tester
        Film film = filmService.findFilmByTitle("Title");

        // Assertions
        assertNotNull(film);
    }

    @Test
    public void testCreateFilm() throws FilmException {
        // Arrange
        FilmDto inputFilmDto = FilmDto.builder()
                .idFilm(1L)
                .title("Test Film")
                .author("Test Author")
                .outDate("2023-01-01")
                .time(120)
                .categories(Arrays.asList(Category.ACTION, Category.DRAMA))
                .build();

        Film inputFilm = Film.builder()
                .idFilm(inputFilmDto.getIdFilm())
                .title(inputFilmDto.getTitle())
                .author(inputFilmDto.getAuthor())
                .outDate(inputFilmDto.getOutDate())
                .time(inputFilmDto.getTime())
                .category(inputFilmDto.getCategories())
                .build();

        Film createdFilm = Film.builder()
                .idFilm(1L) // Adjust with the actual ID generated by your database
                .title("Test Film")
                .author("Test Author")
                .outDate("2023-01-01")
                .time(120)
                .category(Arrays.asList(Category.ACTION, Category.DRAMA))
                .build();

        FilmDto expectedFilmDto = FilmDto.builder()
                .idFilm(createdFilm.getIdFilm())
                .title(createdFilm.getTitle())
                .author(createdFilm.getAuthor())
                .outDate(createdFilm.getOutDate())
                .time(createdFilm.getTime())
                .categories(createdFilm.getCategory())
                .build();

        // Mocking behavior
        when(filmMapper.filmDtoToFilm(inputFilmDto)).thenReturn(inputFilm);
        when(filmDao.save(inputFilm)).thenReturn(createdFilm);
        when(filmMapper.filmToFilmDto(createdFilm)).thenReturn(expectedFilmDto);

        // Act
        FilmDto resultFilmDto = filmService.createFilm(inputFilmDto);

        // Assert
        assertNotNull(resultFilmDto);
        assertEquals(expectedFilmDto, resultFilmDto);
        // Add more assertions based on your specific requirements
    }

  /*   @Test
    public void testCreateFilm() throws FilmException {
        List<Category> listOfCategories = TestData.createSampleCategories();
        List<Rate> listOfRates = TestData.createSampleRates(); // Utilise la liste de rates ici

        FilmDto filmDto = new FilmDto(1L, "Titre du film", "Description du film", "Réalisateur du film", 2022, listOfRates, listOfCategories);

        // Configuration du comportement simulé du dao
        when(filmDao.save(any(Film.class))).thenReturn(new Film());

        // Exécution de la méthode à tester
        FilmDto film = filmService.createFilm(filmDto);

        // Assertions
        assertNotNull(film);
        verify(filmDao, times(1)).save(any(Film.class));

     }*/

    /*@Test
    public void testUpdateFilm() {
        List<Category> listOfCategories = TestData.createSampleCategories();

        List<Rate> listOfRates = TestData.createSampleRates(); // Utilise la liste de rates ici

        FilmDto filmDto = new FilmDto(1L, "Titre du film", "Description du film", "Réalisateur du film", 2022, listOfRates, listOfCategories);

        // Configuration du comportement simulé du dao
        when(filmDao.findById(anyLong())).thenReturn(Optional.of(new Film()));
        when(filmDao.save(any(Film.class))).thenReturn(new Film());


        // Exécution de la méthode à tester
        filmService.updateFilm(filmDto, 1L);

        // Assertions
        // Ajoute des assertions selon la logique de ta méthode
    }*/

    @Test
    public void testDeleteFilm() {
        // Exécution de la méthode à tester
        filmService.deleteFilm(1L);

        // Assertions
        // Ajoute des assertions selon la logique de ta méthode
        verify(filmDao, times(1)).deleteById(1L);
    }

    @Test
    public void testSearchFilmsByTitle() {
        // Configuration du comportement simulé du dao
        when(filmDao.searchByTitle(anyString())).thenReturn(Collections.singletonList(new Film()));

        // Exécution de la méthode à tester
        List<Film> films = filmService.searchFilmsByTitle("SearchTerm");

        // Assertions
        assertNotNull(films);
        assertFalse(films.isEmpty());
    }
}
